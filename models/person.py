"""Pydantic models for expected API result from Motor Vehicle Collisions â€“ Person API"""
from datetime import date, time, datetime
from pydantic import BaseModel, Field, validator, root_validator


class CrashPersonRecord(BaseModel):
    """
    Pydantic class for modelling API responses
    from NYC Open Data's Motor Vehicle Collisions - Person

    Documentation: https://data.cityofnewyork.us/Public-Safety/Motor-Vehicle-Collisions-Person/f55k-p6yu

    ToDo: Configure fields in YAML
    """


    class Config:
        anystr_strip_whitespace = True
        allow_population_by_field_name = True

    # Primary key first
    unique_id: int = Field(..., description='Unique record code generated by system. Primary Key.')
    collision_id: int = Field(..., description='Crash identification code. Foreign Key, matches unique_id from the Crash table.')
    crash_date: datetime = Field(..., description='Occurrence date of collision')
    crash_time: time = Field(..., description='Occurrence time of collision')
    crash_date_time: datetime = Field(default=None, description='Occurrence datetime of collision - automatically calculated by combining crash_date and crash_time.')

    vehicle_id: str = Field(default=None, description='Vehicle identification code assigned by system.')

    person_id: str = Field(default=None, description='Person identification code assigned by system')
    person_type: str = Field(..., description='Bicyclist, Motor Vehicle Occupant, Pedestrian')
    person_injury: str = Field(..., description='Injured, killed, unspecified')
    person_age: int = Field(default=None, description='Automatically calculated based on date of birth')
    person_sex: str = Field(default=None, description='Gender of person')

    ejection: str = Field(default=None)
    emotional_status: str = Field(default=None)
    bodily_injury: str = Field(default=None)
    position_in_vehicle: str = Field(default=None)
    safety_equipment: str = Field(default=None)
    ped_location: str = Field(default=None)
    ped_action: str = Field(default=None)
    complaint: str = Field(default=None)
    ped_role: str = Field(default=None)
    contributing_factor_1: str = Field(default=None)
    contributing_factor_2: str = Field(default=None)


    @validator("crash_date_time", always=True)
    def composite_name(cls, v, values, **kwargs):
        """Converts crash_date and crash_time to datetime"""
        return datetime.combine(values['crash_date'].date(), values['crash_time'])
