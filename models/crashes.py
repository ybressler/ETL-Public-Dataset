"""Pydantic models for expected API result from Motor Vehicle Collisions - Crashes API"""
from datetime import date, time, datetime
from pydantic import BaseModel, Field, validator, root_validator


class CrashRecord(BaseModel):
    """
    Pydantic class for modelling API responses
    from NYC Open Data's Motor Vehicle Collisions - Vehicles

    Documentation: https://data.cityofnewyork.us/Public-Safety/Motor-Vehicle-Collisions-Crashes/h9gi-nx95

    ToDo: Configure fields in YAML
    """


    class Config:
        anystr_strip_whitespace = True
        allow_population_by_field_name = True

    # Primary key first
    collision_id: int = Field(..., description='Unique record code generated by system. Primary Key for Crash table.')
    is_valid: bool = Field(default=True, description="Heuristically determined rule, if this record is valid or not")

    crash_date: datetime = Field(..., description='Occurrence date of collision')
    crash_time: time = Field(..., description='Occurrence time of collision')
    crash_date_time: datetime = Field(default=None, description='Occurrence datetime of collision - automatically calculated by combining crash_date and crash_time.')
    borough: str = Field(default=None, description='Borough where collision occurred. If not in a specific borough, value will be None')
    zip_code: str = Field(default=None, description='Postal code of incident occurrence')
    latitude: float = Field(default=None, description='Latitude coordinate for Global Coordinate System, WGS 1984, decimal degrees (EPSG 4326)')
    longitude: float = Field(default=None, description='Longitude coordinate for Global Coordinate System, WGS 1984, decimal degrees (EPSG 4326)')
    on_street_name: str = Field(default=None, description='Street on which the collision occurred')
    off_street_name: str = Field(default=None, description='Nearest cross street to the collision')
    cross_street_name: str = Field(default=None, description='Street address if known')

    # A bit tedious, would be nice to creater this in a loop
    number_of_persons_injured: int = Field(default=0, description='Number of persons injured')
    number_of_persons_killed: int = Field(default=0, description='Number of persons killed')
    number_of_cyclist_injured: int = Field(default=0, description='Number of cyclists injured')
    number_of_cyclist_killed: int = Field(default=0, description='Number of cyclists killed')
    number_of_pedestrians_injured: int = Field(default=0, description='Number of pedestrians injured')
    number_of_pedestrians_killed: int = Field(default=0, description='Number of pedestrians killed')
    number_of_motorist_injured: int = Field(default=0, description='Number of motorists injured')
    number_of_motorist_killed: int = Field(default=0, description='Number of motorists killed')

    # This too is a bit tedious
    contributing_factor_vehicle_1: str = Field(default=None, description='Factors contributing to the collision for designated vehicle')
    contributing_factor_vehicle_2: str = Field(default=None, description='Factors contributing to the collision for designated vehicle')
    contributing_factor_vehicle_3: str = Field(default=None, description='Factors contributing to the collision for designated vehicle')
    contributing_factor_vehicle_4: str = Field(default=None, description='Factors contributing to the collision for designated vehicle')
    contributing_factor_vehicle_5: str = Field(default=None, description='Factors contributing to the collision for designated vehicle')

    vehicle_type_code1: str = Field(default=None, description='Type of vehicle based on the selected vehicle category (ATV, bicycle, car/suv, ebike, escooter, truck/bus, motorcycle, other)', alias='vehicle_type_code_1')
    vehicle_type_code2: str = Field(default=None, description='Type of vehicle based on the selected vehicle category (ATV, bicycle, car/suv, ebike, escooter, truck/bus, motorcycle, other)', alias='vehicle_type_code_2')
    vehicle_type_code_3: str = Field(default=None, description='Type of vehicle based on the selected vehicle category (ATV, bicycle, car/suv, ebike, escooter, truck/bus, motorcycle, other)')
    vehicle_type_code_4: str = Field(default=None, description='Type of vehicle based on the selected vehicle category (ATV, bicycle, car/suv, ebike, escooter, truck/bus, motorcycle, other)')
    vehicle_type_code_5: str = Field(default=None, description='Type of vehicle based on the selected vehicle category (ATV, bicycle, car/suv, ebike, escooter, truck/bus, motorcycle, other)')


    @root_validator
    def require_location(cls, values):
        location_fields = ('on_street_name', 'off_street_name', 'cross_street_name')
        location_values = filter(None, (values.get(x) for x in location_fields))

        if not any(location_values):
            values['is_valid'] = False

            # Use this for logging later
            # msg = 'No location provided. A minimum of 1 of the following '
            #  f'3 cannot be null: {location_fields}'
        else:
            values['is_valid'] = True

        return values

    @validator("crash_date_time", always=True)
    def composite_name(cls, v, values, **kwargs):
        """Converts crash_date and crash_time to datetime"""
        return datetime.combine(values['crash_date'].date(), values['crash_time'])
