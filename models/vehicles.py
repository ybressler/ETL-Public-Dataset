"""Pydantic models for expected API result from Motor Vehicle Collisions â€“ Vehicles API"""
from datetime import date, time, datetime
from pydantic import BaseModel, Field, validator, root_validator


class CrashVehicleRecord(BaseModel):
    """
    Pydantic class for modelling API responses
    from NYC Open Data's Motor Vehicle Collisions - Vehicles

    Documentation: https://data.cityofnewyork.us/Public-Safety/Motor-Vehicle-Collisions-Vehicles/bm4k-52h4

    ToDo: Configure fields in YAML
    """


    class Config:
        anystr_strip_whitespace = True
        allow_population_by_field_name = True

    # Primary key first
    unique_id: int = Field(..., description='Unique record code generated by system. Primary Key.')
    collision_id: int = Field(..., description='Crash identification code. Foreign Key, matches unique_id from the Crash table.')
    crash_date: datetime = Field(..., description='Occurrence date of collision')
    crash_time: time = Field(..., description='Occurrence time of collision')
    crash_date_time: datetime = Field(default=None, description='Occurrence datetime of collision - automatically calculated by combining crash_date and crash_time.')

    vehicle_id: str = Field(..., description='Vehicle identification code assigned by system.')
    state_registration: str = Field(default=None, description='State where vehicle is registered.')
    vehicle_type: str = Field(default=None, description='Type of vehicle based on the selected vehicle category (ATV, bicycle, car/suv, ebike, escooter, truck/bus, motorcycle, other)')
    vehicle_year: int = Field(default=None, description='Year the vehicle was manufactured')
    travel_direction: str = Field(default=None)
    vehicle_occupants: int = Field(default=None, description='Number of vehicle occupants')
    driver_sex: str = Field(default=None)
    driver_license_status: str = Field(default=None)
    driver_license_jurisdiction: str = Field(default=None)
    pre_crash: str = Field(default=None)
    point_of_impact: str = Field(default=None)
    vehicle_damage: str = Field(default=None)
    vehicle_damage_1: str = Field(default=None)
    vehicle_damage_2: str = Field(default=None)
    vehicle_damage_3: str = Field(default=None)
    public_property_damage: str = Field(default=None)
    public_property_damage_type: str = Field(default=None)
    contributing_factor_1: str = Field(default=None)
    contributing_factor_2: str = Field(default=None)

    @validator("crash_date_time", always=True)
    def composite_name(cls, v, values, **kwargs):
        """Converts crash_date and crash_time to datetime"""
        return datetime.combine(values['crash_date'].date(), values['crash_time'])
