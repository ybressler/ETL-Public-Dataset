"""Pydantic models for expected API result from Crashes API"""
from datetime import date, time, datetime
from pydantic import BaseModel, Field


class CrashRecord(BaseModel):

    class Config:
        anystr_strip_whitespace = True
        allow_population_by_field_name = True

    # Primary key first
    collision_id: int = Field(..., description='Unique record code generated by system. Primary Key for Crash table.')

    crash_date: datetime = Field(..., description='Occurrence date of collision')  # Apply a validator to convert to date after
    crash_time: time = Field(..., description='Occurrence time of collision')
    borough: str = Field(default=None, description='Borough where collision occurred. If not in a specific borough, value will be None')
    zip_code: str = Field(default=None, description='Postal code of incident occurrence')
    latitude: float = Field(default=None, description='Latitude coordinate for Global Coordinate System, WGS 1984, decimal degrees (EPSG 4326)')
    longitude: float = Field(default=None, description='Longitude coordinate for Global Coordinate System, WGS 1984, decimal degrees (EPSG 4326)')
    on_street_name: str = Field(default=None, description='Street on which the collision occurred')
    off_street_name: str = Field(default=None, description='Nearest cross street to the collision')
    cross_street_name: str = Field(default=None, description='Street address if known')

    # Create validation: a minoimum of 1 of the following 3 cannot be null: ['on_street_name', 'off_street_name', 'cross_street_name']

    # A bit tedious, would be nice to creater this in a loop
    number_of_persons_injured: int = Field(default=0, description='Number of persons injured')
    number_of_persons_killed: int = Field(default=0, description='Number of persons killed')
    number_of_cyclist_injured: int = Field(default=0, description='Number of cyclists injured')
    number_of_cyclist_killed: int = Field(default=0, description='Number of cyclists killed')
    number_of_pedestrians_injured: int = Field(default=0, description='Number of pedestrians injured')
    number_of_pedestrians_killed: int = Field(default=0, description='Number of pedestrians killed')
    number_of_motorist_injured: int = Field(default=0, description='Number of motorists injured')
    number_of_motorist_killed: int = Field(default=0, description='Number of motorists killed')

    # This too is a bit tedious
    contributing_factor_vehicle_1: str = Field(default=None, description='Factors contributing to the collision for designated vehicle')
    contributing_factor_vehicle_2: str = Field(default=None, description='Factors contributing to the collision for designated vehicle')
    contributing_factor_vehicle_3: str = Field(default=None, description='Factors contributing to the collision for designated vehicle')
    contributing_factor_vehicle_4: str = Field(default=None, description='Factors contributing to the collision for designated vehicle')
    contributing_factor_vehicle_5: str = Field(default=None, description='Factors contributing to the collision for designated vehicle')

    vehicle_type_code1: str = Field(default=None, description='Type of vehicle based on the selected vehicle category (ATV, bicycle, car/suv, ebike, escooter, truck/bus, motorcycle, other)', alias='vehicle_type_code_1')
    vehicle_type_code2: str = Field(default=None, description='Type of vehicle based on the selected vehicle category (ATV, bicycle, car/suv, ebike, escooter, truck/bus, motorcycle, other)', alias='vehicle_type_code_2')
    vehicle_type_code_3: str = Field(default=None, description='Type of vehicle based on the selected vehicle category (ATV, bicycle, car/suv, ebike, escooter, truck/bus, motorcycle, other)')
    vehicle_type_code_4: str = Field(default=None, description='Type of vehicle based on the selected vehicle category (ATV, bicycle, car/suv, ebike, escooter, truck/bus, motorcycle, other)')
    vehicle_type_code_5: str = Field(default=None, description='Type of vehicle based on the selected vehicle category (ATV, bicycle, car/suv, ebike, escooter, truck/bus, motorcycle, other)')
